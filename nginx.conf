worker_processes 1;

events {
    worker_connections  256;
}

http {
    lua_shared_dict prometheus_metrics 10M;
    init_by_lua_block {
      prometheus = require("prometheus").init("prometheus_metrics")
      metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "status", "method"})
      metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host", "method"})
      metric_connections = prometheus:gauge(
        "nginx_http_connections", "Number of HTTP connections", {"state"})
      metric_response_size = prometheus:histogram(
        "nginx_http_response_size_bytes", "HTTP response size", {"host", "method"})
    }
    log_by_lua_block {
      metric_requests:inc(1, {ngx.var.host, ngx.var.status, ngx.var.request_method})
      metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.host, ngx.var.request_method})
      metric_response_size:observe(tonumber(ngx.var.body_bytes_sent), {ngx.var.host, ngx.var.request_method})
    }

    include             mime.types;
    default_type        application/octet-stream;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    gzip  on;

    server {
        listen 9145;

        access_log off;

        location /metrics {
            content_by_lua_block {
                metric_connections:set(ngx.var.connections_active, {"active"})
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                prometheus:collect()
            }
        }
    }

    include /etc/nginx/conf.d/*.conf;
}